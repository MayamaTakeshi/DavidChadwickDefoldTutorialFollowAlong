function init(self)
	-- The 'acquire_input_focus' message directs this cursor GameObject to 'listen' to inputs, e.g, a touch or a mouse button contact_point_response
	msg.post(".", "acquire_input_focus")

	-- Initializgin a series of Script Properties - as control variables
	self.collision_id = nil -- id of the go which the cursor collided with
	self.dragged_id = nil -- id of the go currently being dragged
	self.dragged_pos = nil -- the position of the dragged id game object
	self.press = false -- binary flag indicating if the user has touched the screen
end

function update(self, dt)
	-- set the render clear color -- aka, screen color when nothing is rendered
	msg.post("@render:", "clear_color",
	{color = vmath.vector4(95/256, 129 /256, 161/256, 1) })

	-- get the current position of the cursor
	local pos = go.get_position()

	-- set the label to echo the cursor position (pos.x and pos.y)
	label.set_text("#cursorLabel", "---- x: " .. pos.x .. " y: " .. pos.y)

	-- Reset the control variable for collision_id each frame
	self.collision_id = nil
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if not self.collision_id or
		go.get_position(self.collision_id).z < message.other_position.z then
			self.collision_id = message.other_id
		end
	end
end

function on_input(self, action_id, action)
	-- Only process inputs which reflect a 'touch action' as defined within game.input bindings
	if not action_id or action_id == hash("touch") then
		-- Update the Defold cursor GO position to be the same as the current
		-- position of the machine cursor
		local action_pos = vmath.vector3(action.x, action.y, 0)
		go.set_position(action_pos)

		--- Revise script control variables; click/touch -- as pressed or released
		if action.pressed then
			-- when the action reflects a press 
			msg.post("#collisionobject", "enable")
			self.pressed = true
		elseif action.released then
			-- when action reflects a release 
			msg.post("#collisionobject", "disable")
			self.pressed = false
			self.dragged_id = nil
			self.dragging = false

			-- Reset the scale to 1.0 on Selected GO when released
			local s1 =vmath.vector3(1.0, 1.0, 1.0)
			go.set_scale(s1, self.collision_id)
		end

		-- Upon a Click/Touch -- if the cursor has collided with another GO and 
		-- is not already dragging another GO -- then set dragged_id / dragged_pos
		-- to the new GO's id 

		if self.pressed and self.collision_id and not self.dragged_id then
			self.dragged_id = self.collision_id
			self.dragged_pos = action_pos

			-- Increase Scale for selected GO when selected
			local s2 = vmath.vector3(1.2, 1.2, 1.0)
			go.set_scale(s2, self.collision_id)
		end

		-- set self.dragging to true if user has clicked a GO and moves it 
		if self.dragged_id and vmath.length(self.dragged_pos - action_pos) > 20 then
			self.dragging = true 
		end

		-- Update the positoin of a dragged go
		if self.dragging then
			go.set_position(action_pos, self.dragged_id)
		end
	end
end

	